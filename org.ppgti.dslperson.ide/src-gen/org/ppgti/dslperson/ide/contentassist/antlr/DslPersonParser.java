/*
 * generated by Xtext 2.25.0
 */
package org.ppgti.dslperson.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.ppgti.dslperson.ide.contentassist.antlr.internal.InternalDslPersonParser;
import org.ppgti.dslperson.services.DslPersonGrammarAccess;

public class DslPersonParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslPersonGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslPersonGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getValidIDAccess().getAlternatives(), "rule__ValidID__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getPersonAccess().getGroup(), "rule__Person__Group__0");
			builder.put(grammarAccess.getPersonAccess().getGroup_3(), "rule__Person__Group_3__0");
			builder.put(grammarAccess.getPersonAccess().getGroup_3_1(), "rule__Person__Group_3_1__0");
			builder.put(grammarAccess.getCpfAccess().getGroup(), "rule__Cpf__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
			builder.put(grammarAccess.getPersonsAccess().getPersonsAssignment(), "rule__Persons__PersonsAssignment");
			builder.put(grammarAccess.getPersonAccess().getCpfAssignment_1(), "rule__Person__CpfAssignment_1");
			builder.put(grammarAccess.getPersonAccess().getAttributesAssignment_3_0(), "rule__Person__AttributesAssignment_3_0");
			builder.put(grammarAccess.getPersonAccess().getAttributesAssignment_3_1_1(), "rule__Person__AttributesAssignment_3_1_1");
			builder.put(grammarAccess.getAttributeAccess().getKeyAssignment_0(), "rule__Attribute__KeyAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getValueAssignment_2(), "rule__Attribute__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslPersonGrammarAccess grammarAccess;

	@Override
	protected InternalDslPersonParser createParser() {
		InternalDslPersonParser result = new InternalDslPersonParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslPersonGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslPersonGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
