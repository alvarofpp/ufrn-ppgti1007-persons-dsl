/*
 * generated by Xtext 2.25.0
 */
package org.ppgti.dslperson.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslPersonGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PersonsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Persons");
		private final Assignment cPersonsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPersonsPersonParserRuleCall_0 = (RuleCall)cPersonsAssignment.eContents().get(0);
		
		//Persons:
		//    persons+=Person*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//persons+=Person*
		public Assignment getPersonsAssignment() { return cPersonsAssignment; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_0() { return cPersonsPersonParserRuleCall_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCpfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCpfValidIDParserRuleCall_1_0 = (RuleCall)cCpfAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0_0 = (RuleCall)cAttributesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_1_0 = (RuleCall)cAttributesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Person:
		//    'person' cpf=ValidID '{' ((attributes+=Attribute) (',' attributes+=Attribute)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'person' cpf=ValidID '{' ((attributes+=Attribute) (',' attributes+=Attribute)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//cpf=ValidID
		public Assignment getCpfAssignment_1() { return cCpfAssignment_1; }
		
		//ValidID
		public RuleCall getCpfValidIDParserRuleCall_1_0() { return cCpfValidIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//((attributes+=Attribute) (',' attributes+=Attribute)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(attributes+=Attribute)
		public Assignment getAttributesAssignment_3_0() { return cAttributesAssignment_3_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0_0() { return cAttributesAttributeParserRuleCall_3_0_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_1_1() { return cAttributesAssignment_3_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_1_0() { return cAttributesAttributeParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCpfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValidID:
		//    ID | Cpf
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | Cpf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//Cpf
		public RuleCall getCpfParserRuleCall_1() { return cCpfParserRuleCall_1; }
	}
	public class CpfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Cpf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Cpf:
		//    INT'.'INT'.'INT'-'INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT'.'INT'.'INT'-'INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//    key=STRING ':' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value:
		//    INT | STRING | ANY_OTHER | Date | Boolean
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING | ANY_OTHER | Date | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2() { return cANY_OTHERTerminalRuleCall_2; }
		
		//Date
		public RuleCall getDateParserRuleCall_3() { return cDateParserRuleCall_3; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Date:
		//    INT'/'INT'/'INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT'/'INT'/'INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ppgti.dslperson.DslPerson.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//    'true' | 'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final PersonsElements pPersons;
	private final PersonElements pPerson;
	private final ValidIDElements pValidID;
	private final CpfElements pCpf;
	private final AttributeElements pAttribute;
	private final ValueElements pValue;
	private final DateElements pDate;
	private final BooleanElements pBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslPersonGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPersons = new PersonsElements();
		this.pPerson = new PersonElements();
		this.pValidID = new ValidIDElements();
		this.pCpf = new CpfElements();
		this.pAttribute = new AttributeElements();
		this.pValue = new ValueElements();
		this.pDate = new DateElements();
		this.pBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ppgti.dslperson.DslPerson".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Persons:
	//    persons+=Person*
	//;
	public PersonsElements getPersonsAccess() {
		return pPersons;
	}
	
	public ParserRule getPersonsRule() {
		return getPersonsAccess().getRule();
	}
	
	//Person:
	//    'person' cpf=ValidID '{' ((attributes+=Attribute) (',' attributes+=Attribute)*)? '}'
	//;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//ValidID:
	//    ID | Cpf
	//;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//Cpf:
	//    INT'.'INT'.'INT'-'INT
	//;
	public CpfElements getCpfAccess() {
		return pCpf;
	}
	
	public ParserRule getCpfRule() {
		return getCpfAccess().getRule();
	}
	
	//Attribute:
	//    key=STRING ':' value=Value
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Value:
	//    INT | STRING | ANY_OTHER | Date | Boolean
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Date:
	//    INT'/'INT'/'INT
	//;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Boolean:
	//    'true' | 'false'
	//;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
