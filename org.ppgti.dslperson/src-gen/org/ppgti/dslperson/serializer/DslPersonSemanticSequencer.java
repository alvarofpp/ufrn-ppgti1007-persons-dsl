/*
 * generated by Xtext 2.25.0
 */
package org.ppgti.dslperson.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.ppgti.dslperson.dslPerson.Attribute;
import org.ppgti.dslperson.dslPerson.DslPersonPackage;
import org.ppgti.dslperson.dslPerson.Person;
import org.ppgti.dslperson.dslPerson.Persons;
import org.ppgti.dslperson.services.DslPersonGrammarAccess;

@SuppressWarnings("all")
public class DslPersonSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslPersonGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPersonPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPersonPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DslPersonPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case DslPersonPackage.PERSONS:
				sequence_Persons(context, (Persons) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (key=STRING value=Value)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPersonPackage.Literals.ATTRIBUTE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPersonPackage.Literals.ATTRIBUTE__KEY));
			if (transientValues.isValueTransient(semanticObject, DslPersonPackage.Literals.ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPersonPackage.Literals.ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getKeySTRINGTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getAttributeAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (cpf=ValidID (attributes+=Attribute attributes+=Attribute*)?)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Persons returns Persons
	 *
	 * Constraint:
	 *     persons+=Person+
	 */
	protected void sequence_Persons(ISerializationContext context, Persons semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
